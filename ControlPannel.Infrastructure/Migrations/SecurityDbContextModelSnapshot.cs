// <auto-generated />
using System;
using ControlPannel.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ControlPannel.Infrastructure.Migrations
{
    [DbContext(typeof(SecurityDbContext))]
    partial class SecurityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ControlPannel.Domain.Entities.Actee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ActeeType")
                        .HasColumnType("int");

                    b.Property<long>("ApplicationPackageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationPackageId");

                    b.ToTable("tbActee");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Aplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AuthorizationGrandType")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClientScope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("IpRange")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAutoApprove")
                        .HasColumnType("bit");

                    b.Property<bool>("LockEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedirectUrls")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Scheduled")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tbApplications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AuthorizationGrandType = 3,
                            ClientId = "client-id-123",
                            ClientScope = "openid profile",
                            ClientSecret = "super-secure-secret",
                            CreateDate = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "This is the main application for authentication",
                            IpRange = "192.168.1.0/24",
                            IsAutoApprove = false,
                            LockEnabled = true,
                            ModifyDate = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            RedirectUrls = "https://example.com/callback",
                            Scheduled = "00:00-23:59",
                            Status = 0,
                            Title = "Main Application"
                        });
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.ApplicationPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("tbApplicationPackage");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.BiometricType", b =>
                {
                    b.Property<string>("Title")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Title");

                    b.ToTable("tbBiometricType");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.ConfigurationLock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CaptchaNeeded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("FailedLoginAmountBeforeCaptcha")
                        .HasColumnType("smallint");

                    b.Property<int>("LockTimeInterval")
                        .HasColumnType("int");

                    b.Property<short>("LockType")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("tbConfigurationLock");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.ConfigurationPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ExpireDaysAmount")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsComplex")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPolicyNeeded")
                        .HasColumnType("bit");

                    b.Property<short>("MaxPassLength")
                        .HasColumnType("smallint");

                    b.Property<short>("MinPassLength")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MustBeChangedInFirstLogin")
                        .HasColumnType("bit");

                    b.Property<bool>("MustContainChar")
                        .HasColumnType("bit");

                    b.Property<bool>("MustContainUpperCase")
                        .HasColumnType("bit");

                    b.Property<short>("NumericPassNotEqual")
                        .HasColumnType("smallint");

                    b.Property<bool>("RedirectToCustomUrlAfterChangePass")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlAfterChangePass")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("WillPassExpire")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("tbConfigurationPassword");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApplicationId = 1L,
                            CreateDate = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            DeleteDate = new DateTime(9999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpireDaysAmount = (short)90,
                            IsComplex = false,
                            IsPolicyNeeded = false,
                            MaxPassLength = (short)16,
                            MinPassLength = (short)8,
                            ModifyDate = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            MustBeChangedInFirstLogin = false,
                            MustContainChar = false,
                            MustContainUpperCase = false,
                            NumericPassNotEqual = (short)2,
                            RedirectToCustomUrlAfterChangePass = false,
                            TwoFactorEnabled = true,
                            UrlAfterChangePass = "https://example.com/password-changed",
                            WillPassExpire = true
                        });
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.ConfigurationSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<int>("ConcurrencyCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConcurrentActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionTimeout")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("tbConfigurationSession");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Mask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("tbMask");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ActeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MenuKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActeeId");

                    b.ToTable("tbMenu");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.OauthToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<short>("TokenType")
                        .HasColumnType("smallint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tbOauthToken");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ActeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Granting")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("tbPermission");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Authority")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("PermissionId");

                    b.ToTable("tbRole");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ActeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rest")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActeeId");

                    b.ToTable("tbService");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LoginAttempt")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scheduled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactor")
                        .HasColumnType("bit");

                    b.Property<string>("Uuid")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("tbUser");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Standard user",
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            IpRange = "0.0.0.0",
                            LastName = "Doe",
                            LoginAttempt = 0,
                            Mobile = "09123456789",
                            ModifyDate = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            NationalCode = "9876543210",
                            PrimaryKey = "john-primary-key",
                            Scheduled = "00:00-23:59",
                            Status = 0,
                            TwoFactor = false,
                            Uuid = "user-uuid-002"
                        });
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.UserBiometric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BiometricTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BiometricTitle");

                    b.HasIndex("UserId");

                    b.ToTable("tbUserBiometric");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.UserProperty", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConfigurationPasswordId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("ConfigurationPasswordId");

                    b.ToTable("UserProperties");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            ConfigurationPasswordId = 1L,
                            Password = "securepassword123"
                        });
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("tbUserRole");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            IsDefault = false,
                            ModifyDate = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            RoleId = 1L,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("controlpannel.domain.Entities.LoginPolicy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LockEndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LockStartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<short>("LockTypes")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tbLoginPolicy");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateDate = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            LockEndDateTime = new DateTime(2024, 1, 1, 12, 30, 0, 0, DateTimeKind.Utc),
                            LockStartDateTime = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            LockTypes = (short)5,
                            ModifyDate = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Actee", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.ApplicationPackage", "ApplicationPackage")
                        .WithMany()
                        .HasForeignKey("ApplicationPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationPackage");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.ApplicationPackage", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.Aplication", "Application")
                        .WithMany("ApplicationPackages")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.ConfigurationLock", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.Aplication", "Application")
                        .WithMany("ConfigurationLocks")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.ConfigurationPassword", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.Aplication", "Application")
                        .WithMany("ConfigurationPasswords")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.ConfigurationSession", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.Aplication", "Application")
                        .WithMany("ConfigurationSessions")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Mask", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Menu", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.Actee", "Actee")
                        .WithMany("Menus")
                        .HasForeignKey("ActeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actee");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Permission", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.Actee", "Actee")
                        .WithMany("Permissions")
                        .HasForeignKey("ActeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlPannel.Domain.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Actee");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Role", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.Aplication", "Application")
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlPannel.Domain.Entities.Permission", null)
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Service", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.Actee", "Actee")
                        .WithMany("Services")
                        .HasForeignKey("ActeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actee");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.UserBiometric", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.BiometricType", "BiometricType")
                        .WithMany("UserBiometrics")
                        .HasForeignKey("BiometricTitle")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlPannel.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BiometricType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.UserProperty", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.ConfigurationPassword", "ConfigurationPassword")
                        .WithMany("UserProperties")
                        .HasForeignKey("ConfigurationPasswordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlPannel.Domain.Entities.User", "User")
                        .WithMany("UserProperties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfigurationPassword");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlPannel.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("controlpannel.domain.Entities.LoginPolicy", b =>
                {
                    b.HasOne("ControlPannel.Domain.Entities.User", "User")
                        .WithMany("LoginPolicies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Actee", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("Permissions");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Aplication", b =>
                {
                    b.Navigation("ApplicationPackages");

                    b.Navigation("ConfigurationLocks");

                    b.Navigation("ConfigurationPasswords");

                    b.Navigation("ConfigurationSessions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.BiometricType", b =>
                {
                    b.Navigation("UserBiometrics");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.ConfigurationPassword", b =>
                {
                    b.Navigation("UserProperties");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ControlPannel.Domain.Entities.User", b =>
                {
                    b.Navigation("LoginPolicies");

                    b.Navigation("UserProperties");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
